Based on the video tutorials by Corey Schafer
Git is a distributed vcs, unlike centralized ones like svn or perforce.
central is located at 1 place. if this gets corrupted or damaged, you better pray there's a backup somewhere.
distributed: everyone has a local repo. your local repo has all the info the remote repo has.
its like every developer has a copy of the same repo.
2 scenarios we can start out with:
1. there's a local project you have on your computer that you want to start tracking
2. there's a remote repo you want to start tracking(eg if you're collabing with friends or work)

scenario 1:
1. navigate into the folder you want to start tracking.
2. so for eg, create a folder on your desktop. open git bash. navigate into it.
3. type "git init". this will initialize a git repo within this folder.
4. if you want to create some personal files with sensitive data that you don't want shared with other people, create a .gitignore file.
5. simply type "touch .gitignore". this is a simple textfile.
6. open this file now, and add the file names you want ignored. these files should start with "." for eg .ignorethisfile
7. add .ignorethisfile to the .gitignore file.
8. once you add files to the .gitignore file, you will no longer see them once you run "git status"

so there's 3 stages in git:
1. the working dir - this is where you start working. so any files you create, make changes to start off in this area. if you run git status, you'll see files in the working dir in red.
2. the staging area - files that have been added using the "git add" command will show up in green.
3. the .git dir (final stage)

once files are in the staging area, they can be committed.
to remove a file from the staging area, type "git reset filename"
if you run git status now, this file should show up in red instead of green.

to commit your changes from the staging area to the .git repo:
type "git commit -m commitmsg"
now, if you type git status, it'll say that the working tree is clean, which basically means that everything that was in the working dir has been committed.

"git log" command: get a list of commits you've made.

now, we want to create a remote repo of this folder meaning you want to see this repo is the list of repo's in your github profile.
1. create a new repo in your github profile. it'll ask you for a repo name, description etc.
2. type "git remote add origin URL-of-the-remote-repo"
3. git push -u origin master
^you don't need to memorize these instructions. these will be displayed as soon as you create the remote repo from your github profile.
4. refresh, and you should be able to see the files you committed!
if you want to stop tracking this with git, type "rm rf .git"
run "git status" to see the status of your files i.e which have been committed etc.